; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64 < %s | FileCheck %s

; Test that (sitofp (fptosi x)) can be optimized to ftrunc when all uses are
; either insenstive to the sign-bit (comparison) or that they will fix the
; sign-bit when the original value is in the range of (-1.0, 0.0) and then the
; rounding mode can affect the result.

define double @fptosi_sitofp_never_zero_add(double %x) {
; CHECK-LABEL: fptosi_sitofp_never_zero_add:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintz d0, d0
; CHECK-NEXT:    fmov d1, #1.00000000
; CHECK-NEXT:    fadd d0, d0, d1
; CHECK-NEXT:    ret
  %conv1 = fptosi double %x to i32
  %conv2 = sitofp i32 %conv1 to double
  %add = fadd double %conv2, 1.0
  ret double %add
}

define i1 @fptosi_sitofp_compare(double %x) {
; CHECK-LABEL: fptosi_sitofp_compare:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintz d0, d0
; CHECK-NEXT:    fcmp d0, #0.0
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %conv1 = fptosi double %x to i32
  %conv2 = sitofp i32 %conv1 to double
  %cmp = fcmp oeq double %conv2, 0.0
  ret i1 %cmp
}

define double @fptosi_sitofp_fabs(double %x) {
; CHECK-LABEL: fptosi_sitofp_fabs:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintz d0, d0
; CHECK-NEXT:    fabs d0, d0
; CHECK-NEXT:    ret
  %conv1 = fptosi double %x to i32
  %conv2 = sitofp i32 %conv1 to double
  %abs = call double @llvm.fabs.f64(double %conv2)
  ret double %abs
}

define double @fptosi_sitofp_mul(double %x) {
; CHECK-LABEL: fptosi_sitofp_mul:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtzs w8, d0
; CHECK-NEXT:    scvtf d0, w8
; CHECK-NEXT:    fadd d0, d0, d0
; CHECK-NEXT:    ret
  %conv1 = fptosi double %x to i32
  %conv2 = sitofp i32 %conv1 to double
  %mul = fmul double %conv2, 2.0
  ret double %mul
}

define double @fptosi_sitofp_could_be_zero(double %x) {
; CHECK-LABEL: fptosi_sitofp_could_be_zero:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtzs w8, d0
; CHECK-NEXT:    scvtf d0, w8
; CHECK-NEXT:    ret
  %conv1 = fptosi double %x to i32
  %conv2 = sitofp i32 %conv1 to double
  ret double %conv2
}

define double @fptosi_sitofp_add_zero(double %x) {
; CHECK-LABEL: fptosi_sitofp_add_zero:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtzs w8, d0
; CHECK-NEXT:    movi d1, #0000000000000000
; CHECK-NEXT:    scvtf d0, w8
; CHECK-NEXT:    fadd d0, d0, d1
; CHECK-NEXT:    ret
  %conv1 = fptosi double %x to i32
  %conv2 = sitofp i32 %conv1 to double
  %add = fadd double %conv2, 0.0
  ret double %add
}

declare double @llvm.fabs.f64(double)
