; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64 < %s | FileCheck %s

define <4 x i32> @test_zextload_i8_to_vec(i8* %ptr) {
; CHECK-LABEL: test_zextload_i8_to_vec:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr b0, [x0]
; CHECK-NEXT:    ret
  %val = load i8, i8* %ptr
  %ext = zext i8 %val to i32
  %vec = insertelement <4 x i32> undef, i32 %ext, i32 0
  ret <4 x i32> %vec
}

define <4 x i32> @test_zextload_i16_to_vec(i16* %ptr) {
; CHECK-LABEL: test_zextload_i16_to_vec:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr h0, [x0]
; CHECK-NEXT:    ret
  %val = load i16, i16* %ptr
  %ext = zext i16 %val to i32
  %vec = insertelement <4 x i32> undef, i32 %ext, i32 0
  ret <4 x i32> %vec
}

define <4 x i32> @test_zextload_i8_indexed(i8* %ptr) {
; CHECK-LABEL: test_zextload_i8_indexed:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr b0, [x0, #5]
; CHECK-NEXT:    ret
  %addr = getelementptr i8, i8* %ptr, i64 5
  %val = load i8, i8* %addr
  %ext = zext i8 %val to i32
  %vec = insertelement <4 x i32> undef, i32 %ext, i32 0
  ret <4 x i32> %vec
}

define <4 x i32> @test_zextload_i16_indexed(i16* %ptr) {
; CHECK-LABEL: test_zextload_i16_indexed:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr h0, [x0, #10]
; CHECK-NEXT:    ret
  %addr = getelementptr i16, i16* %ptr, i64 5
  %val = load i16, i16* %addr
  %ext = zext i16 %val to i32
  %vec = insertelement <4 x i32> undef, i32 %ext, i32 0
  ret <4 x i32> %vec
}

define <4 x i32> @test_zextload_i8_large_offset(i8* %ptr) {
; CHECK-LABEL: test_zextload_i8_large_offset:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr b0, [x0, #255]
; CHECK-NEXT:    ret
  %addr = getelementptr i8, i8* %ptr, i64 255
  %val = load i8, i8* %addr
  %ext = zext i8 %val to i32
  %vec = insertelement <4 x i32> undef, i32 %ext, i32 0
  ret <4 x i32> %vec
}

define <4 x i32> @test_zextload_i16_large_offset(i16* %ptr) {
; CHECK-LABEL: test_zextload_i16_large_offset:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr h0, [x0, #510]
; CHECK-NEXT:    ret
  %addr = getelementptr i16, i16* %ptr, i64 255
  %val = load i16, i16* %addr
  %ext = zext i16 %val to i32
  %vec = insertelement <4 x i32> undef, i32 %ext, i32 0
  ret <4 x i32> %vec
}

define <2 x i64> @test_zextload_i8_to_v2i64(i8* %ptr) {
; CHECK-LABEL: test_zextload_i8_to_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr b0, [x0]
; CHECK-NEXT:    ret
  %val = load i8, i8* %ptr
  %ext = zext i8 %val to i64
  %vec = insertelement <2 x i64> undef, i64 %ext, i32 0
  ret <2 x i64> %vec
}

define <2 x i64> @test_zextload_i16_to_v2i64(i16* %ptr) {
; CHECK-LABEL: test_zextload_i16_to_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr h0, [x0]
; CHECK-NEXT:    ret
  %val = load i16, i16* %ptr
  %ext = zext i16 %val to i64
  %vec = insertelement <2 x i64> undef, i64 %ext, i32 0
  ret <2 x i64> %vec
}

define <2 x i64> @test_zextload_i8_to_v2i64_indexed(i8* %ptr) {
; CHECK-LABEL: test_zextload_i8_to_v2i64_indexed:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr b0, [x0, #5]
; CHECK-NEXT:    ret
  %addr = getelementptr i8, i8* %ptr, i64 5
  %val = load i8, i8* %addr
  %ext = zext i8 %val to i64
  %vec = insertelement <2 x i64> undef, i64 %ext, i32 0
  ret <2 x i64> %vec
}

define <2 x i64> @test_zextload_i16_to_v2i64_indexed(i16* %ptr) {
; CHECK-LABEL: test_zextload_i16_to_v2i64_indexed:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr h0, [x0, #10]
; CHECK-NEXT:    ret
  %addr = getelementptr i16, i16* %ptr, i64 5
  %val = load i16, i16* %addr
  %ext = zext i16 %val to i64
  %vec = insertelement <2 x i64> undef, i64 %ext, i32 0
  ret <2 x i64> %vec
}
